using DesafioPOO.Models;

namespace DesafioPOO.Tests
{
    /// <summary>
    /// Exemplos de testes unit√°rios para demonstrar como testar o sistema
    /// Para executar, instale o pacote NUnit: dotnet add package NUnit
    /// </summary>
    public class SmartphoneTests
    {
        /// <summary>
        /// Exemplo de teste para valida√ß√£o de construtor do Nokia
        /// </summary>
        public void TestNokiaConstruction()
        {
            // Arrange & Act
            var nokia = new Nokia("11987654321", "Nokia 3310", "123456789012345", 64);

            // Assert (em um teste real usar√≠amos Assert.AreEqual)
            Console.WriteLine($"‚úÖ Nokia criado: {nokia.Modelo}");
            Console.WriteLine($"‚úÖ N√∫mero: {nokia.Numero}");
            Console.WriteLine($"‚úÖ Mem√≥ria: {nokia.Memoria}GB");
        }

        /// <summary>
        /// Exemplo de teste para valida√ß√£o de instala√ß√£o de aplicativo
        /// </summary>
        public void TestInstalarAplicativo()
        {
            // Arrange
            var iphone = new Iphone("11912345678", "iPhone 14", "987654321098765", 128);
            var appCount = iphone.AplicativosInstalados.Count;

            // Act
            iphone.InstalarAplicativo("Instagram");

            // Assert (em um teste real usar√≠amos Assert.AreEqual)
            var newAppCount = iphone.AplicativosInstalados.Count;
            Console.WriteLine($"‚úÖ Apps antes: {appCount}, Apps depois: {newAppCount}");
            Console.WriteLine($"‚úÖ Instagram instalado: {iphone.AplicativosInstalados.Contains("Instagram")}");
        }

        /// <summary>
        /// Exemplo de teste para valida√ß√£o de entrada inv√°lida
        /// </summary>
        public void TestValidacaoEntrada()
        {
            try
            {
                // Arrange & Act - tentando criar Nokia com n√∫mero vazio
                var nokia = new Nokia("", "Nokia 3310", "123456789012345", 64);
                Console.WriteLine("‚ùå Erro: deveria ter lan√ßado exce√ß√£o");
            }
            catch (ArgumentException ex)
            {
                // Assert
                Console.WriteLine($"‚úÖ Valida√ß√£o funcionou: {ex.Message}");
            }
        }

        /// <summary>
        /// Exemplo de teste de polimorfismo
        /// </summary>
        public void TestPolimorfismo()
        {
            // Arrange - lista de smartphones diferentes
            List<Smartphone> smartphones = new()
            {
                new Nokia("11111111111", "Nokia 3310", "111111111111111", 64),
                new Iphone("22222222222", "iPhone 14", "222222222222222", 128),
                new Samsung("33333333333", "Galaxy S23", "333333333333333", 256)
            };

            // Act & Assert - testando polimorfismo
            foreach (var smartphone in smartphones)
            {
                Console.WriteLine($"‚úÖ Testando {smartphone.GetType().Name}:");
                smartphone.Ligar(); // Cada um ter√° comportamento diferente
                smartphone.ReceberLigacao(); // Polimorfismo em a√ß√£o
                Console.WriteLine();
            }
        }

        /// <summary>
        /// Executa todos os testes de exemplo
        /// </summary>
        public static void ExecutarTodos()
        {
            var tests = new SmartphoneTests();
            
            Console.WriteLine("üß™ EXECUTANDO TESTES DE EXEMPLO üß™");
            Console.WriteLine("=".PadRight(50, '='));
            Console.WriteLine();

            Console.WriteLine("1Ô∏è‚É£ Teste de Constru√ß√£o do Nokia:");
            tests.TestNokiaConstruction();
            Console.WriteLine();

            Console.WriteLine("2Ô∏è‚É£ Teste de Instala√ß√£o de Aplicativo:");
            tests.TestInstalarAplicativo();
            Console.WriteLine();

            Console.WriteLine("3Ô∏è‚É£ Teste de Valida√ß√£o de Entrada:");
            tests.TestValidacaoEntrada();
            Console.WriteLine();

            Console.WriteLine("4Ô∏è‚É£ Teste de Polimorfismo:");
            tests.TestPolimorfismo();

            Console.WriteLine("‚úÖ Todos os testes executados com sucesso!");
        }
    }
}
