namespace DesafioPOO.Models
{
    public class Iphone : Smartphone, ISmartphoneFeatures
    {
        private readonly List<string> _aplicativosInstalados;
        private readonly List<string> _appStoreApps;

        public IReadOnlyList<string> AplicativosInstalados => _aplicativosInstalados.AsReadOnly();
        public IReadOnlyList<string> AppStoreApps => _appStoreApps.AsReadOnly();

        public Iphone(string numero, string modelo, string imei, int memoria)
            : base(numero, modelo, imei, memoria)
        {
            _aplicativosInstalados = new List<string> { "Safari", "C√¢mera", "Configura√ß√µes", "App Store" };
            _appStoreApps = new List<string> 
            { 
                "Instagram", "WhatsApp", "TikTok", "YouTube", "Netflix", 
                "Spotify", "Twitter", "Facebook", "LinkedIn", "Uber" 
            };
        }

        public override void Ligar()
        {
            Console.WriteLine($"üì± iPhone {Modelo} ligando com Face ID/Touch ID...");
        }

        public override void ReceberLigacao()
        {
            Console.WriteLine($"üéµ iPhone {Modelo} recebendo liga√ß√£o com toque personalizado...");
        }

        public override void InstalarAplicativo(string nome)
        {
            if (string.IsNullOrWhiteSpace(nome))
            {
                Console.WriteLine("‚ùå Nome do aplicativo n√£o pode ser vazio.");
                return;
            }

            if (_aplicativosInstalados.Contains(nome, StringComparer.OrdinalIgnoreCase))
            {
                Console.WriteLine($"‚ö†Ô∏è {nome} j√° est√° instalado no iPhone {Modelo}.");
                return;
            }

            // Simular verifica√ß√£o na App Store
            if (!_appStoreApps.Contains(nome, StringComparer.OrdinalIgnoreCase))
            {
                Console.WriteLine($"‚ùå {nome} n√£o foi encontrado na App Store.");
                return;
            }

            _aplicativosInstalados.Add(nome);
            Console.WriteLine($"üì± Conectando √† App Store...");
            Console.WriteLine($"üì• Baixando {nome} para iPhone {Modelo}...");
            Console.WriteLine($"‚úÖ {nome} instalado com sucesso da App Store!");
        }

        public override void DesinstalarAplicativo(string nome)
        {
            if (string.IsNullOrWhiteSpace(nome))
            {
                Console.WriteLine("‚ùå Nome do aplicativo n√£o pode ser vazio.");
                return;
            }

            var app = _aplicativosInstalados.FirstOrDefault(a => 
                string.Equals(a, nome, StringComparison.OrdinalIgnoreCase));

            if (app == null)
            {
                Console.WriteLine($"‚ùå {nome} n√£o est√° instalado no iPhone {Modelo}.");
                return;
            }

            // Aplicativos do sistema n√£o podem ser removidos
            var sistemApps = new[] { "Safari", "C√¢mera", "Configura√ß√µes", "App Store" };
            if (sistemApps.Contains(app, StringComparer.OrdinalIgnoreCase))
            {
                Console.WriteLine($"‚ö†Ô∏è {nome} √© um aplicativo do sistema e n√£o pode ser removido.");
                return;
            }

            _aplicativosInstalados.Remove(app);
            Console.WriteLine($"üóëÔ∏è Removendo {nome} do iPhone {Modelo}...");
            Console.WriteLine($"‚úÖ {nome} removido com sucesso!");
        }

        public void ExibirAplicativos()
        {
            Console.WriteLine($"üì± Aplicativos instalados no iPhone {Modelo}:");
            foreach (var app in _aplicativosInstalados)
            {
                Console.WriteLine($"   ‚Ä¢ {app}");
            }
        }

        public void AbrirAppStore()
        {
            Console.WriteLine($"üè™ Abrindo App Store no iPhone {Modelo}...");
            Console.WriteLine("üì± Aplicativos dispon√≠veis para download:");
            foreach (var app in _appStoreApps.Take(5))
            {
                Console.WriteLine($"   ‚Ä¢ {app}");
            }
            Console.WriteLine("   ... e muitos outros!");
        }

        public void UsarSiri()
        {
            Console.WriteLine($"üé§ \"Hey Siri\" ativado no iPhone {Modelo}!");
            Console.WriteLine("ü§ñ Siri: Como posso ajud√°-lo hoje?");
        }
    }
}
